"""–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è MEXC - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º."""
import asyncio
import logging

from exchanges.mexc_adapter import MexcAdapter

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # DEBUG —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
)
logger = logging.getLogger(__name__)


async def test_mexc_contracts():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤."""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –æ—Ç MEXC")
    print("="*80 + "\n")
    
    mexc = MexcAdapter()
    
    try:
        contracts = await mexc.get_top_contracts(limit=10)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {len(contracts)}\n")
        
        if contracts:
            print("–ü–µ—Ä–≤—ã–µ 5 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:")
            for i, contract in enumerate(contracts[:5], 1):
                print(f"  {i}. {contract.symbol} ({contract.base_currency})")
        else:
            print("‚ö†Ô∏è  –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        await mexc.close()
        return contracts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        await mexc.close()
        return []


async def test_mexc_funding_rate(symbol='BTC_USDT'):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è funding rate –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞."""
    print("\n" + "="*80)
    print(f"–¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ funding rate –¥–ª—è {symbol}")
    print("="*80 + "\n")
    
    mexc = MexcAdapter()
    
    try:
        rate = await mexc.get_funding_rate(symbol)
        
        if rate:
            print(f"‚úÖ Funding rate –ø–æ–ª—É—á–µ–Ω!")
            print(f"   –°–∏–º–≤–æ–ª: {rate.symbol}")
            print(f"   –°—Ç–∞–≤–∫–∞: {rate.rate_percentage:+.4f}%")
            print(f"   –¶–µ–Ω–∞: ${rate.price:.2f}")
            print(f"   –°–ª–µ–¥—É—é—â–∏–π funding: {rate.next_funding_time}")
        else:
            print(f"‚ö†Ô∏è  Funding rate –Ω–µ –ø–æ–ª—É—á–µ–Ω –¥–ª—è {symbol}")
            
            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            print("\n–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã...")
            for alt_symbol in ['BTCUSDT', 'BTC-USDT', 'BTCUSD']:
                print(f"  –ü—Ä–æ–±—É—é: {alt_symbol}")
                alt_rate = await mexc.get_funding_rate(alt_symbol)
                if alt_rate:
                    print(f"  ‚úÖ –£—Å–ø–µ—Ö —Å {alt_symbol}!")
                    rate = alt_rate
                    break
                    
        await mexc.close()
        return rate
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        await mexc.close()
        return None


async def test_mexc_all_rates():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö funding rates."""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö funding rates")
    print("="*80 + "\n")
    
    mexc = MexcAdapter()
    
    try:
        print("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å ~10-15 —Å–µ–∫)...\n")
        rates = await mexc.get_all_funding_rates()
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞–≤–æ–∫: {len(rates)}\n")
        
        if rates:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ
            rates.sort(key=lambda x: x.abs_rate, reverse=True)
            
            print("–¢–æ–ø-5 –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ:")
            for i, rate in enumerate(rates[:5], 1):
                print(f"  {i}. {rate.symbol}: {rate.rate_percentage:+.4f}% (${rate.price:.2f})")
        else:
            print("‚ö†Ô∏è  –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏")
            
        await mexc.close()
        return rates
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        await mexc.close()
        return []


async def test_mexc_api_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç MEXC API."""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ 4: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ MEXC API")
    print("="*80 + "\n")
    
    import httpx
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            # –¢–µ—Å—Ç 1: Contract detail
            print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ /api/v1/contract/detail...")
            url1 = "https://contract.mexc.com/api/v1/contract/detail"
            resp1 = await client.get(url1)
            data1 = resp1.json()
            print(f"   Status: {resp1.status_code}")
            print(f"   Success: {data1.get('success')}")
            print(f"   Data items: {len(data1.get('data', []))}")
            
            # –¢–µ—Å—Ç 2: Ticker –¥–ª—è BTC_USDT
            print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ /api/v1/contract/ticker/BTC_USDT...")
            url2 = "https://contract.mexc.com/api/v1/contract/ticker/BTC_USDT"
            resp2 = await client.get(url2)
            data2 = resp2.json()
            print(f"   Status: {resp2.status_code}")
            print(f"   Success: {data2.get('success')}")
            if data2.get('success'):
                ticker_data = data2.get('data', {})
                print(f"   Funding rate: {ticker_data.get('fundingRate')}")
                print(f"   Last price: {ticker_data.get('lastPrice')}")
            
            # –¢–µ—Å—Ç 3: Funding rate
            print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ /api/v1/contract/funding_rate/BTC_USDT...")
            url3 = "https://contract.mexc.com/api/v1/contract/funding_rate/BTC_USDT"
            resp3 = await client.get(url3)
            data3 = resp3.json()
            print(f"   Status: {resp3.status_code}")
            print(f"   Success: {data3.get('success')}")
            if data3.get('success'):
                print(f"   Funding rate: {data3.get('data', {}).get('fundingRate')}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("\n" + "="*80)
    print(" –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MEXC –ê–î–ê–ü–¢–ï–†–ê")
    print("="*80)
    
    # –¢–µ—Å—Ç –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
    await test_mexc_api_direct()
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    contracts = await test_mexc_contracts()
    
    # –¢–µ—Å—Ç funding rate
    if contracts:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        test_symbol = contracts[0].symbol
        await test_mexc_funding_rate(test_symbol)
    else:
        await test_mexc_funding_rate('BTC_USDT')
    
    # –¢–µ—Å—Ç –≤—Å–µ—Ö rates
    await test_mexc_all_rates()
    
    print("\n" + "="*80)
    print(" –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*80 + "\n")


if __name__ == "__main__":
    asyncio.run(main())
