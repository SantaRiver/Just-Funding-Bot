"""–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ funding rates."""
import os
import logging
from logging.handlers import RotatingFileHandler
from datetime import datetime, timezone, timedelta
from typing import Dict, Set
import asyncio
from pathlib import Path
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackContext
)

from exchanges import (
    BybitAdapter,
    BinanceAdapter,
    MexcAdapter,
    GateioAdapter,
    KucoinAdapter,
    BitgetAdapter,
    BingxAdapter,
    BitmartAdapter,
    OkxAdapter
)
from models import FundingRate
from services.aggregator import FundingRateAggregator
from services.formatter import MessageFormatter


# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
logs_dir = Path(__file__).parent / "logs"
logs_dir.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª—ã
log_format = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥-—Ñ–∞–π–ª (–≤—Å–µ —É—Ä–æ–≤–Ω–∏)
main_handler = RotatingFileHandler(
    logs_dir / "bot.log",
    maxBytes=10*1024*1024,  # 10 MB
    backupCount=5,
    encoding='utf-8'
)
main_handler.setFormatter(log_format)
main_handler.setLevel(logging.INFO)

# –õ–æ–≥-—Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫
error_handler = RotatingFileHandler(
    logs_dir / "errors.log",
    maxBytes=5*1024*1024,  # 5 MB
    backupCount=3,
    encoding='utf-8'
)
error_handler.setFormatter(log_format)
error_handler.setLevel(logging.ERROR)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_format)
console_handler.setLevel(logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ root logger
logging.basicConfig(
    level=logging.INFO,
    handlers=[main_handler, error_handler, console_handler]
)

# –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)
logger.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {logs_dir.absolute()}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
aggregator: FundingRateAggregator = None
formatter = MessageFormatter()
user_settings: Dict[int, Dict] = {}  # {user_id: {threshold: float, monitoring: bool}}


class FundingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞."""
    
    def __init__(self, token: str, cache_ttl: int = 30, admin_user_id: int = None):
        self.token = token
        self.cache_ttl = cache_ttl
        self.admin_user_id = admin_user_id
        self.app = None
        self.aggregator = self._init_aggregator()
        self.formatter = MessageFormatter()
        self.user_settings: Dict[int, Dict] = {}
        self.alert_cooldown: Dict[str, datetime] = {}  # {token: last_alert_time}
        self.time_alert_sent: Dict[str, Set[str]] = {}  # {chat_id: set of "token_20m" or "token_10m"}
        
    def _init_aggregator(self) -> FundingRateAggregator:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ —Å –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏ –±–∏—Ä–∂."""
        exchanges = [
            BybitAdapter(),
            BinanceAdapter(),
            MexcAdapter(),
            GateioAdapter(),
            KucoinAdapter(),
            BitgetAdapter(),
            BingxAdapter(),
            BitmartAdapter(),
            OkxAdapter(),
        ]
        logger.info(f"Initializing aggregator with {len(exchanges)} exchanges, cache TTL: {self.cache_ttl}s")
        return FundingRateAggregator(exchanges, cache_ttl=self.cache_ttl)
    
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        if self.admin_user_id is None:
            logger.warning("ADMIN_USER_ID not set - admin commands are disabled")
            return False
        return user_id == self.admin_user_id
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        chat_id = update.effective_chat.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –õ–°, —Ç–∞–∫ –∏ –≥—Ä—É–ø–ø)
        if chat_id not in self.user_settings:
            self.user_settings[chat_id] = {
                'threshold': 0.5,  # 0.5% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'monitoring': False,
                'tokens': set(),  # –¢–æ–∫–µ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                'time_alerts': False,  # –ê–ª–µ—Ä—Ç—ã –∑–∞ 20/10 –º–∏–Ω—É—Ç –¥–æ funding
            }
        
        welcome_message = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø Funding Rate Bot</b>\n\n"
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞–≤–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞—Ö\n"
            "‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç 9 –±–∏—Ä–∂\n"
            "üöÄ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (TTL 30 —Å–µ–∫)\n\n"
            "<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "üèÜ /top - –¢–æ–ø-5 —Ç–æ–∫–µ–Ω–æ–≤ —Å –±–ª–∏–∂–∞–π—à–∏–º funding\n"
            "üîç /token BTC - –î–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É\n"
            "üíé /hedge - –ù–∞–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚öôÔ∏è /set_threshold 0.5 - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞\n"
            "üîî /start_monitoring - –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ –ø–æ—Ä–æ–≥—É\n"
            "üîï /stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "‚è∞ /start_time_alerts - –ê–ª–µ—Ä—Ç—ã –∑–∞ 20/10 –º–∏–Ω –¥–æ funding\n"
            "‚è∞ /stop_time_alerts - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å time-based –∞–ª–µ—Ä—Ç—ã\n"
            "üìä /status - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º:</b>\n"
            "üìà /cache_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞\n"
            "üóëÔ∏è /clear_cache - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à\n\n"
            "<i>üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏: Bybit, Binance, MEXC, Gate.io, KuCoin, Bitget, BingX, BitMart, OKX</i>"
        )
        await update.message.reply_text(welcome_message, parse_mode='HTML')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        await self.start(update, context)
    
    async def top_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø —Ç–æ–∫–µ–Ω–æ–≤."""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        exchanges_list = ", ".join([ex.name for ex in self.aggregator.exchanges])
        await update.message.reply_text(f"üîÑ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–∏—Ä–∂: {exchanges_list}...")
        
        logger.info(f"\n{'='*80}")
        logger.info(f"üî• /top command from user {user_id} in chat {chat_id}")
        logger.info(f"{'='*80}")
        logger.info(f"üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂: {len(self.aggregator.exchanges)}")
        logger.info(f"üìã –°–ø–∏—Å–æ–∫ –±–∏—Ä–∂: {exchanges_list}")
        
        try:
            from datetime import datetime
            start_time = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º (ASYNC)
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
            grouped = await self.aggregator.get_grouped_by_token(top_contracts_limit=5)
            
            elapsed = (datetime.now() - start_time).total_seconds()
            logger.info(f"\n{'='*80}")
            logger.info(f"‚è±Ô∏è  –ò–¢–û–ì–û: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.2f}s")
            logger.info(f"{'='*80}")
            
            if not grouped:
                logger.warning("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–∏—Ä–∂")
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_exchanges_responded = sum(len(rates) for rates in grouped.values())
            total_possible = len(grouped) * len(self.aggregator.exchanges)
            success_rate = (total_exchanges_responded / total_possible * 100) if total_possible > 0 else 0
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º:")
            for token, rates in grouped.items():
                logger.info(f"   ‚Ä¢ {token}: {len(rates)}/{len(self.aggregator.exchanges)} –±–∏—Ä–∂ –æ—Ç–≤–µ—Ç–∏–ª–∏")
            
            logger.info(f"\n‚úÖ –û–±—â–∏–π —É—Å–ø–µ—Ö: {total_exchanges_responded}/{total_possible} ({success_rate:.1f}%)")
            logger.info(f"{'='*80}\n")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            message = self.formatter.format_grouped_report(grouped, limit=5)
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"‚ùå Error in top_command: {type(e).__name__}: {e}")
            import traceback
            logger.error(f"Stack trace:\n{traceback.format_exc()}")
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    async def token_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /token - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–∫–µ–Ω—É."""
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /token <SYMBOL>\n–ü—Ä–∏–º–µ—Ä: /token BTC")
            return
        
        token = context.args[0].upper().replace('USDT', '')
        await update.message.reply_text(f"üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ {token}...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Å–µ—Ö –±–∏—Ä–∂ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û
            import asyncio
            tasks = []
            for exchange in self.aggregator.exchanges:
                tasks.append(self.aggregator._get_rate_for_token(exchange, token))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            rates = [r for r in results if isinstance(r, FundingRate)]
            
            if not rates:
                await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–∫–µ–Ω—É {token}")
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ
            rates.sort(key=lambda x: x.abs_rate, reverse=True)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.formatter.format_alert(
                token=token,
                rates=rates,
                threshold=self.user_settings.get(update.effective_user.id, {}).get('threshold', 0.5)
            )
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error in token_command: {e}")
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    async def set_threshold_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_threshold - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞."""
        if not context.args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_threshold <VALUE>\n"
                "–ü—Ä–∏–º–µ—Ä: /set_threshold 0.5 (–¥–ª—è –ø–æ—Ä–æ–≥–∞ –≤ 0.5%)"
            )
            return
        
        try:
            threshold = float(context.args[0])
            chat_id = update.effective_chat.id
            
            if chat_id not in self.user_settings:
                self.user_settings[chat_id] = {'threshold': threshold, 'monitoring': False}
            else:
                self.user_settings[chat_id]['threshold'] = threshold
            
            await update.message.reply_text(f"‚úÖ –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {threshold}%")
            
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    
    async def start_monitoring_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_monitoring - –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø)
        if chat_id not in self.user_settings:
            self.user_settings[chat_id] = {'threshold': 0.5, 'monitoring': True}
        else:
            self.user_settings[chat_id]['monitoring'] = True
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
        old_jobs = context.job_queue.get_jobs_by_name(f"monitor_{chat_id}")
        for job in old_jobs:
            job.schedule_removal()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —á–∞—Ç–∞
        context.job_queue.run_repeating(
            self.check_alerts,
            interval=600,  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            first=10,
            data={'chat_id': chat_id},
            name=f"monitor_{chat_id}"
        )
        
        threshold = self.user_settings[chat_id]['threshold']
        chat_type = update.effective_chat.type
        chat_info = "–≥—Ä—É–ø–ø–µ" if chat_type in ['group', 'supergroup'] else "–ª–∏—á–∫–µ"
        
        await update.message.reply_text(
            f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ {chat_info}!\n"
            f"–ü–æ—Ä–æ–≥: {threshold}%\n"
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"
        )
    
    async def stop_monitoring_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_monitoring - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        chat_id = update.effective_chat.id
        
        if chat_id in self.user_settings:
            self.user_settings[chat_id]['monitoring'] = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        jobs = context.job_queue.get_jobs_by_name(f"monitor_{chat_id}")
        for job in jobs:
            job.schedule_removal()
        
        await update.message.reply_text("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_time_alerts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_time_alerts - –Ω–∞—á–∞—Ç—å time-based –∞–ª–µ—Ä—Ç—ã."""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø)
        if chat_id not in self.user_settings:
            self.user_settings[chat_id] = {
                'threshold': 0.5,
                'monitoring': False,
                'time_alerts': True
            }
        else:
            self.user_settings[chat_id]['time_alerts'] = True
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
        old_jobs = context.job_queue.get_jobs_by_name(f"time_alerts_{chat_id}")
        for job in old_jobs:
            job.schedule_removal()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ time-based –∞–ª–µ—Ä—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã)
        context.job_queue.run_repeating(
            self.check_time_alerts,
            interval=120,  # –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
            first=10,
            data={'chat_id': chat_id},
            name=f"time_alerts_{chat_id}"
        )
        
        chat_type = update.effective_chat.type
        chat_info = "–≥—Ä—É–ø–ø–µ" if chat_type in ['group', 'supergroup'] else "–ª–∏—á–∫–µ"
        
        await update.message.reply_text(
            f"‚úÖ Time-based –∞–ª–µ—Ä—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ {chat_info}!\n"
            f"‚è∞ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
            f"  ‚Ä¢ –ó–∞ 20 –º–∏–Ω—É—Ç –¥–æ funding\n"
            f"  ‚Ä¢ –ó–∞ 10 –º–∏–Ω—É—Ç –¥–æ funding\n"
            f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã"
        )
    
    async def stop_time_alerts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_time_alerts - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å time-based –∞–ª–µ—Ä—Ç—ã."""
        chat_id = update.effective_chat.id
        
        if chat_id in self.user_settings:
            self.user_settings[chat_id]['time_alerts'] = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É time-based –∞–ª–µ—Ä—Ç–æ–≤
        jobs = context.job_queue.get_jobs_by_name(f"time_alerts_{chat_id}")
        for job in jobs:
            job.schedule_removal()
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if str(chat_id) in self.time_alert_sent:
            self.time_alert_sent[str(chat_id)].clear()
        
        await update.message.reply_text("‚úÖ Time-based –∞–ª–µ—Ä—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        chat_id = update.effective_chat.id
        settings = self.user_settings.get(chat_id, {'threshold': 0.5, 'monitoring': False, 'time_alerts': False})
        
        status_emoji = "üü¢" if settings.get('monitoring') else "üî¥"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if settings.get('monitoring') else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        
        time_alerts_emoji = "üü¢" if settings.get('time_alerts') else "üî¥"
        time_alerts_text = "–ê–∫—Ç–∏–≤–Ω—ã" if settings.get('time_alerts') else "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã"
        
        message = (
            f"\nüìä <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
            f"{'‚îÄ' * 30}\n\n"
            f"‚öôÔ∏è –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞: <b>{settings.get('threshold', 0.5)}%</b>\n"
            f"{status_emoji} –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ –ø–æ—Ä–æ–≥—É: <b>{status_text}</b>\n"
            f"{time_alerts_emoji} Time-based –∞–ª–µ—Ä—Ç—ã: <b>{time_alerts_text}</b>\n\n"
            f"<i>üí° /start_monitoring - –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –ø–æ—Ä–æ–≥—É</i>\n"
            f"<i>‚è∞ /start_time_alerts - –∞–ª–µ—Ä—Ç—ã –∑–∞ 20/10 –º–∏–Ω –¥–æ funding</i>"
        )
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def cache_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cache_stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self._is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            logger.warning(f"User {user_id} attempted to access cache_stats without admin rights")
            return
        
        try:
            stats = await self.aggregator.get_cache_stats()
            
            message = f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞</b>\n"
            message += f"{'‚îÄ' * 30}\n\n"
            message += f"‚öôÔ∏è Cache TTL: <b>{self.cache_ttl}—Å</b>\n"
            message += f"üì¶ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>{stats['total_entries']}</b>\n"
            message += f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: <b>{stats['valid_entries']}</b>\n"
            message += f"‚ùå –ò—Å—Ç–µ–∫—à–∏—Ö: <b>{stats['expired_entries']}</b>\n\n"
            
            if stats['entries']:
                message += "<b>–ó–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ:</b>\n"
                for entry in stats['entries']:
                    status = "‚úÖ" if entry['valid'] else "‚ùå"
                    message += f"{status} <code>{entry['key']}</code>\n"
                    message += f"   –í–æ–∑—Ä–∞—Å—Ç: {entry['age_seconds']:.1f}—Å / TTL: {entry['ttl_seconds']}—Å\n"
            else:
                message += "<i>–ö—ç—à –ø—É—Å—Ç</i>"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error in cache_stats_command: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def clear_cache_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_cache - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self._is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            logger.warning(f"User {user_id} attempted to clear cache without admin rights")
            return
        
        try:
            await self.aggregator.clear_cache()
            await update.message.reply_text("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω")
            logger.info(f"Cache cleared by admin user {user_id}")
            
        except Exception as e:
            logger.error(f"Error in clear_cache_command: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def hedge_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hedge - –Ω–∞–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è."""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Å–ø—Ä–µ–¥–æ–º
        min_spread = 0.3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.3%
        if context.args:
            try:
                min_spread = float(context.args[0])
                if min_spread < 0:
                    await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                    return
            except ValueError:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hedge [MIN_SPREAD]\n"
                    "–ü—Ä–∏–º–µ—Ä: /hedge 0.5 (–¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ 0.5%)\n"
                    "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.3%"
                )
                return
        
        exchanges_list = ", ".join([ex.name for ex in self.aggregator.exchanges])
        await update.message.reply_text(
            f"üîç –ò—â—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è...\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {min_spread}%\n"
            f"–ë–∏—Ä–∂–∏: {exchanges_list}"
        )
        
        logger.info(f"\n{'='*80}")
        logger.info(f"üíé /hedge command from user {user_id} in chat {chat_id}")
        logger.info(f"Min spread: {min_spread}%")
        logger.info(f"{'='*80}")
        
        try:
            from datetime import datetime
            start_time = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è...")
            opportunities = await self.aggregator.find_hedging_opportunities(min_spread=min_spread)
            
            elapsed = (datetime.now() - start_time).total_seconds()
            logger.info(f"\n{'='*80}")
            logger.info(f"‚è±Ô∏è  –ò–¢–û–ì–û: –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.2f}s")
            logger.info(f"{'='*80}")
            
            if not opportunities:
                await update.message.reply_text(
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Å–ø—Ä–µ–¥–æ–º {min_spread}%\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: /hedge 0.2"
                )
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}")
            for i, opp in enumerate(opportunities[:5], 1):
                logger.info(
                    f"  {i}. {opp['token']}: –°–ø—Ä–µ–¥ {opp['spread']:.4f}% | "
                    f"LONG {opp['long_exchange']} ({opp['long_rate'].rate_percentage:+.4f}%) | "
                    f"SHORT {opp['short_exchange']} ({opp['short_rate'].rate_percentage:+.4f}%)"
                )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            message = self.formatter.format_hedging_opportunities(opportunities, limit=5)
            await update.message.reply_text(message, parse_mode='HTML', disable_web_page_preview=True)
            
        except Exception as e:
            logger.error(f"‚ùå Error in hedge_command: {type(e).__name__}: {e}")
            import traceback
            logger.error(f"Stack trace:\n{traceback.format_exc()}")
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    async def check_alerts(self, context: CallbackContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)."""
        chat_id = context.job.data['chat_id']
        settings = self.user_settings.get(chat_id)
        
        if not settings or not settings['monitoring']:
            return
        
        threshold = settings['threshold']
        
        try:
            logger.info(f"Checking alerts for chat {chat_id}, threshold {threshold}%")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (ASYNC)
            grouped = await self.aggregator.get_grouped_by_token(top_contracts_limit=5)
            
            if not grouped:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–∏—Ä–∂"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω—ã —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ø–æ—Ä–æ–≥–∞
            alerts = []
            for token, rates in grouped.items():
                if not rates:
                    continue
                
                top_rate = rates[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ—Ä–æ–≥
                if top_rate.abs_rate * 100 >= threshold:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ —á–∞—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)
                    cooldown_key = f"{chat_id}_{token}"
                    last_alert = self.alert_cooldown.get(cooldown_key)
                    
                    if last_alert and (datetime.now(timezone.utc) - last_alert).total_seconds() < 3600:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∞–ª–µ—Ä—Ç –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ
                    
                    alerts.append((token, rates))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
                    self.alert_cooldown[cooldown_key] = datetime.now(timezone.utc)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            if alerts:
                # –ï—Å—Ç—å –∞–ª–µ—Ä—Ç—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
                for token, rates in alerts:
                    top_rate = rates[0]
                    message = self.formatter.format_alert(
                        token=token,
                        rates=rates,
                        threshold=threshold,
                        source_exchange=top_rate.exchange
                    )
                    
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    
                    logger.info(f"Alert sent to chat {chat_id} for token {token}")
            else:
                # –ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é —Å–≤–æ–¥–∫—É
                message = self.formatter.format_top_tokens(grouped, source_exchange="BYBIT")
                summary = f"üìä <b>–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>\n"
                summary += f"‚öôÔ∏è –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞: <b>{threshold}%</b>\n"
                summary += f"‚úÖ –í—Å–µ —Å—Ç–∞–≤–∫–∏ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞\n\n"
                summary += message
                
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=summary,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                
                logger.info(f"Regular summary sent to chat {chat_id} - no alerts")
        
        except Exception as e:
            logger.error(f"Error in check_alerts: {e}")
    
    async def check_time_alerts(self, context: CallbackContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ funding (–∑–∞ 20 –∏ 10 –º–∏–Ω—É—Ç)."""
        chat_id = context.job.data['chat_id']
        settings = self.user_settings.get(chat_id)
        
        if not settings or not settings.get('time_alerts'):
            return
        
        try:
            logger.info(f"Checking time-based alerts for chat {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (ASYNC)
            grouped = await self.aggregator.get_grouped_by_token(top_contracts_limit=10)
            
            if not grouped:
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
            if str(chat_id) not in self.time_alert_sent:
                self.time_alert_sent[str(chat_id)] = set()
            
            current_time = datetime.now(timezone.utc)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
            for token, rates in grouped.items():
                if not rates:
                    continue
                
                # –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è funding
                top_rate = rates[0]
                time_until_funding = (top_rate.next_funding_time - current_time).total_seconds() / 60
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (—Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é)
                alert_key_20m = f"{token}_20m"
                alert_key_10m = f"{token}_10m"
                
                # –ó–∞ 20 –º–∏–Ω—É—Ç (18-22 –º–∏–Ω—É—Ç—ã)
                if 18 <= time_until_funding <= 22 and alert_key_20m not in self.time_alert_sent[str(chat_id)]:
                    message = (
                        f"‚è∞ <b>–î–æ funding –æ—Å—Ç–∞–ª–æ—Å—å ~20 –º–∏–Ω—É—Ç</b>\n\n"
                        f"ü™ô <b>–¢–æ–∫–µ–Ω:</b> {token}\n"
                        f"‚è±Ô∏è <b>Funding —á–µ—Ä–µ–∑:</b> {int(time_until_funding)} –º–∏–Ω\n"
                        f"üìÖ <b>–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è:</b> {top_rate.next_funding_time.strftime('%H:%M:%S UTC')}\n\n"
                        f"üìä <b>–°—Ç–∞–≤–∫–∏ –Ω–∞ –±–∏—Ä–∂–∞—Ö:</b>\n"
                    )
                    
                    for rate in rates[:5]:  # –¢–æ–ø-5 –±–∏—Ä–∂
                        message += f"‚Ä¢ <b>{rate.exchange}:</b> {rate.rate_percentage:+.4f}% (${rate.price:.2f})\n"
                    
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    
                    self.time_alert_sent[str(chat_id)].add(alert_key_20m)
                    logger.info(f"20-minute alert sent to chat {chat_id} for token {token}")
                
                # –ó–∞ 10 –º–∏–Ω—É—Ç (8-12 –º–∏–Ω—É—Ç)
                elif 8 <= time_until_funding <= 12 and alert_key_10m not in self.time_alert_sent[str(chat_id)]:
                    message = (
                        f"‚è∞ <b>–î–æ funding –æ—Å—Ç–∞–ª–æ—Å—å ~10 –º–∏–Ω—É—Ç!</b>\n\n"
                        f"ü™ô <b>–¢–æ–∫–µ–Ω:</b> {token}\n"
                        f"‚è±Ô∏è <b>Funding —á–µ—Ä–µ–∑:</b> {int(time_until_funding)} –º–∏–Ω\n"
                        f"üìÖ <b>–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è:</b> {top_rate.next_funding_time.strftime('%H:%M:%S UTC')}\n\n"
                        f"üìä <b>–°—Ç–∞–≤–∫–∏ –Ω–∞ –±–∏—Ä–∂–∞—Ö:</b>\n"
                    )
                    
                    for rate in rates[:5]:  # –¢–æ–ø-5 –±–∏—Ä–∂
                        message += f"‚Ä¢ <b>{rate.exchange}:</b> {rate.rate_percentage:+.4f}% (${rate.price:.2f})\n"
                    
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    
                    self.time_alert_sent[str(chat_id)].add(alert_key_10m)
                    logger.info(f"10-minute alert sent to chat {chat_id} for token {token}")
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã (–µ—Å–ª–∏ funding –ø—Ä–æ—à–ª–æ)
                if time_until_funding < 0:
                    self.time_alert_sent[str(chat_id)].discard(alert_key_20m)
                    self.time_alert_sent[str(chat_id)].discard(alert_key_10m)
        
        except Exception as e:
            logger.error(f"Error in check_time_alerts: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        self.app = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("top", self.top_command))
        self.app.add_handler(CommandHandler("token", self.token_command))
        self.app.add_handler(CommandHandler("hedge", self.hedge_command))
        self.app.add_handler(CommandHandler("set_threshold", self.set_threshold_command))
        self.app.add_handler(CommandHandler("start_monitoring", self.start_monitoring_command))
        self.app.add_handler(CommandHandler("stop_monitoring", self.stop_monitoring_command))
        self.app.add_handler(CommandHandler("start_time_alerts", self.start_time_alerts_command))
        self.app.add_handler(CommandHandler("stop_time_alerts", self.stop_time_alerts_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("cache_stats", self.cache_stats_command))
        self.app.add_handler(CommandHandler("clear_cache", self.clear_cache_command))
        
        logger.info("Bot started")
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not telegram_token:
        logger.error("TELEGRAM_BOT_TOKEN not found in .env file")
        return
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫—ç—à–∞ –∏–∑ .env
    cache_ttl_str = os.getenv("CACHE_TTL", "30")
    # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–≤—Å–µ –ø–æ—Å–ª–µ #)
    cache_ttl_str = cache_ttl_str.split('#')[0].strip()
    try:
        cache_ttl = int(cache_ttl_str)
        logger.info(f"Cache TTL set to: {cache_ttl} seconds")
    except ValueError:
        logger.error(f"Invalid CACHE_TTL in .env: {cache_ttl_str}, using default 30")
        cache_ttl = 30
    
    # –ß–∏—Ç–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ .env
    admin_user_id_str = os.getenv("ADMIN_USER_ID")
    admin_user_id = None
    if admin_user_id_str:
        # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        admin_user_id_str = admin_user_id_str.split('#')[0].strip()
        try:
            admin_user_id = int(admin_user_id_str)
            logger.info(f"Admin user ID set to: {admin_user_id}")
        except ValueError:
            logger.error(f"Invalid ADMIN_USER_ID in .env: {admin_user_id_str}")
    else:
        logger.warning("ADMIN_USER_ID not set - cache management commands will be disabled")
    
    bot = FundingBot(telegram_token, cache_ttl=cache_ttl, admin_user_id=admin_user_id)
    bot.run()


if __name__ == "__main__":
    main()
