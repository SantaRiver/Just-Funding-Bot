"""–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ async –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –±–∏—Ä–∂."""
import asyncio
import logging

from exchanges import (
    BybitAdapter,
    BinanceAdapter,
    MexcAdapter,
    GateioAdapter,
    KucoinAdapter,
)
from services.aggregator import FundingRateAggregator


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def test_single_exchange(exchange, symbol='BTCUSDT'):
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏."""
    print(f"\n{'='*80}")
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {exchange.name}")
    print(f"{'='*80}")
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ funding rate –¥–ª—è BTC
        print(f"\n[1] –ü–æ–ª—É—á–µ–Ω–∏–µ funding rate –¥–ª—è {symbol}...")
        rate = await exchange.get_funding_rate(symbol)
        
        if rate:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"   –°–∏–º–≤–æ–ª: {rate.symbol}")
            print(f"   –°—Ç–∞–≤–∫–∞: {rate.rate_percentage:+.4f}%")
            print(f"   –¶–µ–Ω–∞: ${rate.price:.2f}")
            print(f"   –°–ª–µ–¥—É—é—â–∏–π funding: {rate.next_funding_time}")
        else:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await exchange.close()
        
        return rate is not None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await exchange.close()
        return False


async def test_aggregator():
    """–¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ç–æ–∫–µ–Ω–∞–º."""
    print(f"\n{'='*80}")
    print("–¢–ï–°–¢ –ê–ì–†–ï–ì–ê–¢–û–†–ê - –¢–æ–ø-5 —Ç–æ–∫–µ–Ω–æ–≤ —Å –±–ª–∏–∂–∞–π—à–∏–º funding")
    print(f"{'='*80}\n")
    
    exchanges = [
        BybitAdapter(),
        BinanceAdapter(),
        MexcAdapter(),
        GateioAdapter(),
        KucoinAdapter(),
    ]
    
    aggregator = FundingRateAggregator(exchanges)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —Ç–æ–∫–µ–Ω–æ–≤
        print("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Å–µ—Ö –±–∏—Ä–∂...\n")
        grouped = await aggregator.get_grouped_by_token(top_contracts_limit=5)
        
        if not grouped:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(grouped)} —Ç–æ–∫–µ–Ω–æ–≤\n")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, (token, rates) in enumerate(grouped.items(), 1):
            if not rates:
                continue
            
            print(f"{i}. {token}")
            print(f"   –¢–æ–ø —Å—Ç–∞–≤–∫–∞: {rates[0].exchange} = {rates[0].rate_percentage:+.4f}%")
            print(f"   –¶–µ–Ω–∞: ${rates[0].price:.2f}")
            print(f"   Funding —á–µ—Ä–µ–∑: {(rates[0].next_funding_time - rates[0].next_funding_time.replace(microsecond=0)).total_seconds() / 60:.0f} –º–∏–Ω")
            print(f"   –ë–∏—Ä–∂ —Å–æ–±—Ä–∞–Ω–æ: {len(rates)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –±–∏—Ä–∂–∏
            for rate in rates[:3]:
                print(f"      - {rate.exchange}: {rate.rate_percentage:+.4f}%")
            print()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
        for exchange in exchanges:
            await exchange.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        for exchange in exchanges:
            try:
                await exchange.close()
            except:
                pass


async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏—Ä–∂."""
    print("\n" + "="*80)
    print(" –ë–´–°–¢–†–´–ô –¢–ï–°–¢ ASYNC –ê–î–ê–ü–¢–ï–†–û–í")
    print("="*80)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Bybit –∏ Binance
    exchanges = [
        (BybitAdapter(), 'BTCUSDT'),
        (BinanceAdapter(), 'BTCUSDT'),
    ]
    
    results = {}
    for exchange, symbol in exchanges:
        success = await test_single_exchange(exchange, symbol)
        results[exchange.name] = success
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*80}")
    print(" –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print(f"{'='*80}\n")
    
    for name, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {name}")
    
    success_count = sum(1 for s in results.values() if s)
    total = len(results)
    print(f"\n–£—Å–ø–µ—à–Ω–æ: {success_count}/{total}")


async def full_test():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –±–∏—Ä–∂."""
    print("\n" + "="*80)
    print(" –ü–û–õ–ù–´–ô –¢–ï–°–¢ –í–°–ï–• ASYNC –ê–î–ê–ü–¢–ï–†–û–í")
    print("="*80)
    
    exchanges = [
        (BybitAdapter(), 'BTCUSDT'),
        (BinanceAdapter(), 'BTCUSDT'),
        (MexcAdapter(), 'BTC_USDT'),
        (GateioAdapter(), 'BTC_USDT'),
        (KucoinAdapter(), 'XBTUSDTM'),
    ]
    
    results = {}
    for exchange, symbol in exchanges:
        success = await test_single_exchange(exchange, symbol)
        results[exchange.name] = success
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*80}")
    print(" –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print(f"{'='*80}\n")
    
    for name, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {name}")
    
    success_count = sum(1 for s in results.values() if s)
    total = len(results)
    print(f"\n–£—Å–ø–µ—à–Ω–æ: {success_count}/{total}")
    
    # –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
    await test_aggregator()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == '--quick':
        asyncio.run(quick_test())
    elif len(sys.argv) > 1 and sys.argv[1] == '--aggregator':
        asyncio.run(test_aggregator())
    else:
        asyncio.run(full_test())
    
    print("\n" + "="*80)
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print(f"  python {sys.argv[0]}              - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç")
    print(f"  python {sys.argv[0]} --quick      - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (Bybit + Binance)")
    print(f"  python {sys.argv[0]} --aggregator - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞")
    print("="*80 + "\n")


if __name__ == "__main__":
    main()
