"""–°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π."""
from typing import List, Dict
from datetime import datetime, timezone, timedelta
from models import FundingRate


class MessageFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞."""
    
    @staticmethod
    def _get_rate_emoji(rate: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏."""
        abs_rate = abs(rate * 100)
        if abs_rate >= 1.0:
            return "üî¥"  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è
        elif abs_rate >= 0.5:
            return "üü†"  # –í—ã—Å–æ–∫–∞—è
        elif abs_rate >= 0.1:
            return "üü°"  # –°—Ä–µ–¥–Ω—è—è
        else:
            return "üü¢"  # –ù–∏–∑–∫–∞—è
    
    @staticmethod
    def _get_direction_emoji(rate: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–µ–ª–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏."""
        if rate > 0:
            return "üìà"  # Long –ø–ª–∞—Ç—è—Ç Short
        elif rate < 0:
            return "üìâ"  # Short –ø–ª–∞—Ç—è—Ç Long
        else:
            return "‚ûñ"  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è
    
    @staticmethod
    def _get_contract_link(exchange: str, symbol: str, token: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏."""
        # –û—á–∏—â–∞–µ–º —Å–∏–º–≤–æ–ª –æ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        clean_symbol = symbol.replace('PERP', '').replace('_USDT', '').replace('-USDT', '')
        
        urls = {
            'BYBIT': f'https://www.bybit.com/trade/usdt/{token}USDT',
            'BINANCE': f'https://www.binance.com/en/futures/{token}USDT',
            'MEXC': f'https://futures.mexc.com/exchange/{token}_USDT',
            'GATE': f'https://www.gate.io/futures_trade/USDT/{token}_USDT',
            'GATEIO': f'https://www.gate.io/futures_trade/USDT/{token}_USDT',
            'KUCOIN': f'https://www.kucoin.com/futures/trade/{token}USDTM',
            'BITGET': f'https://www.bitget.com/futures/usdt/{token}USDT',
            'BINGX': f'https://bingx.com/en-us/swap/{token}-USDT/',
            'BITMART': f'https://www.bitmart.com/contract/en?symbol={token}USDT',
            'OKX': f'https://www.okx.com/trade-swap/{token.lower()}-usdt-swap',
        }
        
        url = urls.get(exchange.upper(), '#')
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
        return f'<a href="{url}">–û—Ç–∫—Ä—ã—Ç—å ‚Üó</a>'
    
    @staticmethod
    def format_alert(
        token: str,
        rates: List[FundingRate],
        threshold: float,
        source_exchange: str = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç –æ –≤—ã—Å–æ–∫–æ–π —Å—Ç–∞–≤–∫–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            token: –ë–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            rates: –°–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —É–±—ã–≤–∞–Ω–∏—é abs rate)
            threshold: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            source_exchange: –ë–∏—Ä–∂–∞-–∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–æ–ø–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not rates:
            return ""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–æ–≤—É—é —Å—Ç–∞–≤–∫—É
        top_rate = rates[0]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ funding
        now = datetime.now(timezone.utc)
        time_diff = top_rate.next_funding_time - now
        hours = int(time_diff.total_seconds() // 3600)
        minutes = int((time_diff.total_seconds() % 3600) // 60)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC+3 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        local_time = top_rate.next_funding_time + timedelta(hours=3)
        date_str = local_time.strftime('%d-%m-%Y %H:%M')
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        emoji = MessageFormatter._get_rate_emoji(top_rate.rate)
        direction = MessageFormatter._get_direction_emoji(top_rate.rate)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        source_text = f" –Ω–∞ {source_exchange}" if source_exchange else ""
        header = f"\n{emoji} <b>–ê–õ–ï–†–¢: {token}{source_text}</b> {direction}\n"
        header += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: <b>{hours}—á {minutes}–º–∏–Ω</b>\n"
        header += f"üìä –ü–æ—Ä–æ–≥: {threshold}% | üìÖ {date_str} (UTC+3)\n"
        header += f"{'‚îÄ' * 45}\n\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
        table = "<pre>"
        table += f"{'–ë–∏—Ä–∂–∞':<10} ‚îÇ {'–¶–µ–Ω–∞':<9} ‚îÇ {'Rate':<9} ‚îÇ {'‚è±Ô∏è':<7}\n"
        table += f"{'‚îÄ'*10}‚îÄ‚îº‚îÄ{'‚îÄ'*9}‚îÄ‚îº‚îÄ{'‚îÄ'*9}‚îÄ‚îº‚îÄ{'‚îÄ'*7}\n"
        
        for i, rate in enumerate(rates, 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±–∏—Ä–∂–∏
            time_to_funding = rate.next_funding_time - now
            hours_left = int(time_to_funding.total_seconds() // 3600)
            mins_left = int((time_to_funding.total_seconds() % 3600) // 60)
            countdown = f"{hours_left:02d}:{mins_left:02d}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ –∑–Ω–∞–∫–æ–º
            rate_pct = rate.rate_percentage
            rate_str = f"{rate_pct:+.4f}%"
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
            rate_emoji = MessageFormatter._get_rate_emoji(rate.rate)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            if rate.price >= 1000:
                price_str = f"{rate.price:,.0f}"
            else:
                price_str = f"{rate.price:.2f}"
            
            table += f"{rate.exchange:<10} ‚îÇ {price_str:<9} ‚îÇ {rate_str:<9} ‚îÇ {countdown:<7}\n"
        
        table += "</pre>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        links = "üìä <b>–°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:</b>\n"
        for rate in rates:
            link = MessageFormatter._get_contract_link(rate.exchange, rate.symbol, token)
            links += f"  ‚Ä¢ <b>{rate.exchange}</b>: {link}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
        legend = f"\nüí° <i>–õ–µ–≥–µ–Ω–¥–∞: üî¥ &gt;1% | üü† &gt;0.5% | üü° &gt;0.1% | üü¢ &lt;0.1%</i>\n"
        legend += f"<i>üìà Long‚ÜíShort | üìâ Short‚ÜíLong</i>"
        
        return header + table + links + legend
    
    @staticmethod
    def format_grouped_report(
        grouped_rates: Dict[str, List[FundingRate]],
        limit: int = 5
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç–æ–ø —Ç–æ–∫–µ–Ω–∞–º.
        
        Args:
            grouped_rates: –°–ª–æ–≤–∞—Ä—å {—Ç–æ–∫–µ–Ω: [—Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫]}
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not grouped_rates:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ
        sorted_tokens = sorted(
            grouped_rates.items(),
            key=lambda x: max(r.abs_rate for r in x[1]),
            reverse=True
        )[:limit]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ funding
        now = datetime.now(timezone.utc)
        first_token_rates = sorted_tokens[0][1] if sorted_tokens else []
        if first_token_rates:
            # –ë–µ—Ä–µ–º –≤—Ä–µ–º—è –æ—Ç –ø–µ—Ä–≤–æ–π —Å—Ç–∞–≤–∫–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç Bybit)
            bybit_rate = next((r for r in first_token_rates if r.exchange == "BYBIT"), first_token_rates[0])
            funding_time_local = bybit_rate.next_funding_time + timedelta(hours=3)
            time_str = funding_time_local.strftime('%H:%M')
            date_str = funding_time_local.strftime('%d.%m')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ–¥–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            all_same_time = True
            for token, rates in sorted_tokens:
                bybit_rate_token = next((r for r in rates if r.exchange == "BYBIT"), None)
                if bybit_rate_token:
                    time_diff_check = abs((bybit_rate_token.next_funding_time - bybit_rate.next_funding_time).total_seconds() / 60)
                    if time_diff_check > 5:  # –ë–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç —Ä–∞–∑–Ω–∏—Ü—ã
                        all_same_time = False
                        import logging
                        logging.warning(f"‚ö†Ô∏è  Token {token} has different funding time: {bybit_rate_token.next_funding_time} (diff: {time_diff_check:.1f} min)")
        else:
            time_str, date_str = "N/A", "N/A"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message = f"\nüèÜ <b>–¢–û–ü-{len(sorted_tokens)} –¢–û–ö–ï–ù–û–í</b>\n"
        message += f"‚è∞ Bybit funding: <b>{time_str}</b> ({date_str}, UTC+3)\n"
        message += f"<i>–î—Ä—É–≥–∏–µ –±–∏—Ä–∂–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è ‚¨áÔ∏è</i>\n"
        message += f"{'‚îÄ' * 45}\n\n"
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        for i, (token, rates) in enumerate(sorted_tokens, 1):
            if not rates:
                continue
            
            top_rate = rates[0]
            emoji = MessageFormatter._get_rate_emoji(top_rate.rate)
            direction = MessageFormatter._get_direction_emoji(top_rate.rate)
            
            # –ü–æ–ª—É—á–∞–µ–º Bybit –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            bybit_rate = next((r for r in rates if r.exchange == "BYBIT"), top_rate)
            token_time_local = bybit_rate.next_funding_time + timedelta(hours=3)
            token_time_str = token_time_local.strftime('%H:%M')
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–∫–µ–Ω–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º
            message += f"\n{emoji} <b>{i}. {token}</b> {direction} "
            message += f"<i>(‚è∞ {token_time_str})</i>\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            if top_rate.price >= 1000:
                price_str = f"${top_rate.price:,.0f}"
            else:
                price_str = f"${top_rate.price:.2f}"
            
            message += f"üí∞ –¶–µ–Ω–∞: {price_str}\n"
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å –±–∏—Ä–∂–∞–º–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–π)
            message += "<pre>"
            message += f"{'–ë–∏—Ä–∂–∞':<10} ‚îÇ {'Rate':<9} ‚îÇ {'–í—Ä–µ–º—è':<7}\n"
            message += f"{'‚îÄ'*10}‚îÄ‚îº‚îÄ{'‚îÄ'*9}‚îÄ‚îº‚îÄ{'‚îÄ'*7}\n"
            
            for rate in rates:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±–∏—Ä–∂–∏
                rate_str = f"{rate.rate_percentage:+.4f}%"
                
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è funding –¥–ª—è —ç—Ç–æ–π –±–∏—Ä–∂–∏ (UTC+3)
                rate_time_local = rate.next_funding_time + timedelta(hours=3)
                time_str = rate_time_local.strftime('%H:%M')
                
                message += f"{rate.exchange:<10} ‚îÇ {rate_str:<9} ‚îÇ {time_str:<7}\n"
            
            message += "</pre>\n"
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (–±–µ–∑ pre, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏)
            message += "üìä <b>–°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:</b>\n"
            
            for rate in rates:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                link = MessageFormatter._get_contract_link(rate.exchange, rate.symbol, token)
                message += f"  ‚Ä¢ <b>{rate.exchange}</b>: {link}\n"
            
            message += ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
        message += f"\nüí° <i>üî¥ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è | üü† –í—ã—Å–æ–∫–∞—è | üü° –°—Ä–µ–¥–Ω—è—è | üü¢ –ù–∏–∑–∫–∞—è</i>\n"
        message += f"<i>üìà Long‚ÜíShort | üìâ Short‚ÜíLong</i>\n"
        message += f"<i>‚è∞ –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ UTC+3 (–ú–°–ö). –†–∞–∑–Ω—ã–µ –±–∏—Ä–∂–∏ = —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è funding</i>"
        
        return message
    
    @staticmethod
    def format_simple_list(rates: List[FundingRate], limit: int = 10) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫.
        
        Args:
            rates: –°–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not rates:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        message = "```\n"
        message += f"{'‚Ññ':<3} {'Exchange':<10} {'Symbol':<12} {'Rate':<10} {'Price':<12}\n"
        message += "-" * 60 + "\n"
        
        for i, rate in enumerate(rates[:limit], 1):
            rate_str = f"{rate.rate_percentage:+.4f}%"
            message += f"{i:<3} {rate.exchange:<10} {rate.symbol:<12} {rate_str:<10} ${rate.price:<11.2f}\n"
        
        message += "```"
        
        return message
    
    @staticmethod
    def format_hedging_opportunities(opportunities: List[Dict], limit: int = 5) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            opportunities: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not opportunities:
            return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message = f"\nüíé <b>–í–û–ó–ú–û–ñ–ù–û–°–¢–ò –î–õ–Ø –•–ï–î–ñ–ò–†–û–í–ê–ù–ò–Ø</b>\n"
        message += f"<i>–ù–∞–π–¥–µ–Ω–æ: {len(opportunities)} | –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–æ–ø-{min(limit, len(opportunities))}</i>\n"
        message += f"{'‚îÄ' * 45}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        for i, opp in enumerate(opportunities[:limit], 1):
            token = opp['token']
            spread = opp['spread']
            long_rate = opp['long_rate']
            short_rate = opp['short_rate']
            long_exch = opp['long_exchange']
            short_exch = opp['short_exchange']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–ø—Ä–µ–¥–∞
            if spread >= 1.0:
                spread_emoji = "üî•"  # –û—á–µ–Ω—å –≤—ã–≥–æ–¥–Ω—ã–π —Å–ø—Ä–µ–¥
            elif spread >= 0.5:
                spread_emoji = "üí∞"  # –•–æ—Ä–æ—à–∏–π —Å–ø—Ä–µ–¥
            else:
                spread_emoji = "üíµ"  # –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            message += f"{spread_emoji} <b>{i}. {token}</b>\n"
            message += f"üìä –°–ø—Ä–µ–¥: <b>{spread:.4f}%</b>\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            if long_rate.price >= 1000:
                price_str = f"${long_rate.price:,.0f}"
            else:
                price_str = f"${long_rate.price:.2f}"
            message += f"üí∞ –¶–µ–Ω–∞: {price_str}\n\n"
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è
            message += f"<b>üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>\n"
            message += f"üìà LONG –Ω–∞ <b>{long_exch}</b>: {long_rate.rate_percentage:+.4f}%\n"
            message += f"üìâ SHORT –Ω–∞ <b>{short_exch}</b>: {short_rate.rate_percentage:+.4f}%\n\n"
            
            # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            profit_per_cycle = spread
            message += f"üíµ –ü—Ä–∏–±—ã–ª—å –∑–∞ —Ü–∏–∫–ª: <b>~{profit_per_cycle:.4f}%</b>\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
            from datetime import timezone, timedelta
            now = datetime.now(timezone.utc)
            time_to_funding = long_rate.next_funding_time - now
            hours = int(time_to_funding.total_seconds() // 3600)
            minutes = int((time_to_funding.total_seconds() % 3600) // 60)
            
            message += f"‚è∞ –î–æ funding: <b>{hours}—á {minutes}–º–∏–Ω</b>\n\n"
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –±–∏—Ä–∂–∞–º–∏
            message += "<pre>"
            message += f"{'–ë–∏—Ä–∂–∞':<10} ‚îÇ {'Rate':<9}\n"
            message += f"{'‚îÄ'*10}‚îÄ‚îº‚îÄ{'‚îÄ'*9}\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–µ
            sorted_rates = sorted(opp['all_rates'], key=lambda x: x.rate)
            for rate in sorted_rates:
                rate_str = f"{rate.rate_percentage:+.4f}%"
                # –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∏—Ä–∂–∏
                marker = ""
                if rate.exchange == long_exch:
                    marker = " üìà"
                elif rate.exchange == short_exch:
                    marker = " üìâ"
                
                message += f"{rate.exchange:<10} ‚îÇ {rate_str:<9}{marker}\n"
            
            message += "</pre>\n"
            
            # –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            message += "üìä <b>–°—Å—ã–ª–∫–∏:</b>\n"
            long_link = MessageFormatter._get_contract_link(long_exch, long_rate.symbol, token)
            short_link = MessageFormatter._get_contract_link(short_exch, short_rate.symbol, token)
            message += f"  ‚Ä¢ <b>{long_exch}</b> (LONG): {long_link}\n"
            message += f"  ‚Ä¢ <b>{short_exch}</b> (SHORT): {short_link}\n"
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
            if i < min(limit, len(opportunities)):
                message += f"\n{'‚îÄ' * 45}\n\n"
        
        # –õ–µ–≥–µ–Ω–¥–∞
        message += f"\n\nüí° <i>–°–ø—Ä–µ–¥ = —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –º–∞–∫—Å –∏ –º–∏–Ω —Å—Ç–∞–≤–∫–∞–º–∏</i>\n"
        message += f"<i>üìà LONG = –ø–æ–∫—É–ø–∫–∞ | üìâ SHORT = –ø—Ä–æ–¥–∞–∂–∞</i>\n"
        message += f"<i>üî• &gt;1% | üí∞ &gt;0.5% | üíµ &gt;0.3%</i>\n"
        message += f"\n‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> <i>–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏, –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –∏ —Ä–∏—Å–∫–∏</i>"
        
        return message
